//这段buildscript配置的dependencies是为了apply plugin: 'com.tencent.shadow.plugin'能找到实现
buildscript {
    repositories {
        mavenLocal()
    }

    dependencies {
        classpath "com.tencent.shadow.core:gradle-plugin:${project.shadow_version}"
    }
}

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}
apply plugin: 'com.tencent.shadow.plugin'

android {
    compileSdk project.COMPILE_SDK_VERSION

    defaultConfig {
        applicationId "com.better.app.plugin1"
        // 插件的包名要跟数组一致
//        applicationId project.HOST_APP_APPLICATION_ID
        minSdk project.MIN_SDK_VERSION
        targetSdk project.TARGET_SDK_VERSION

        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    // 将插件applicationId设置为和宿主相同
    productFlavors {
        plugin {
            applicationId project.HOST_APP_APPLICATION_ID
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    //Shadow Transform后业务代码会有一部分实际引用runtime中的类
    //如果不以compileOnly方式依赖，会导致其他Transform或者Proguard找不到这些类
    compileOnly "com.tencent.shadow.core:runtime:$shadow_version"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

shadow {
    // 插件默认添加flavor：normal、plugin,所以下面的APK路基也要修改
    packagePlugin {
        pluginTypes {
            debug {
                loaderApkConfig = new Tuple2('loader-debug.apk', ':plugin_project:loader:assembleDebug')
                runtimeApkConfig = new Tuple2('runtime-debug.apk', ':plugin_project:runtime:assembleDebug')
                pluginApks {
                    pluginApk1 {
                        businessName = 'plugin-demo01'
                        //businessName相同的插件，context获取的Dir是相同的。businessName留空，表示和宿主相同业务，直接使用宿主的Dir。
                        partKey = 'plugin-demo01'
                        buildTask = 'assembleDebug'
                        // apkName和apkPath的文件后缀要一致，因为apkName是在配置文件中跟进，名称去zip里面找这个文件
                        apkName = 'plugin1-plugin-debug.apk'
                        apkPath = 'plugin_project/plugin1/build/outputs/apk/plugin/debug/plugin1-plugin-debug.apk'
                    }
                }
            }

            release {
                loaderApkConfig = new Tuple2('loader-release.apk', ':plugin_project:loader:assembleRelease')
                runtimeApkConfig = new Tuple2('runtime-release.apk', ':plugin_project:runtime:assembleRelease')
                pluginApks {
                    pluginApk1 {
                        businessName = 'plugin-demo01'
                        partKey = 'plugin-demo01'
                        buildTask = 'assembleRelease'
                        apkName = 'plugin1-plugin-release.apk'
                        apkPath = 'plugin_project/plugin1/build/outputs/apk/plugin/release/plugin1-plugin-release.apk'
                    }
                }
            }
        }

        loaderApkProjectPath = 'plugin_project/loader'

        runtimeApkProjectPath = 'plugin_project/runtime'

        version = 1
        compactVersion = [1, 1, 1]
        uuidNickName = "1.0.0"
    }
}